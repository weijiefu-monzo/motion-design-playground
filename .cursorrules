# Cursor Rules for Motion Design Playground

## Figma Component Development Rules

### States vs Props

When creating components from Figma designs:

- **States (Default, Hover, Active, Focus, Disabled, Loading) are for interactions** - they should NOT be included as props in the component interface
- States are handled automatically through CSS pseudo-classes (`:hover`, `:active`, `:focus`, `:disabled`) and conditional styling
- Only include functional props like `disabled`, `loading`, `inverse`, `size`, `variant` etc.
- The component should handle state styling internally through CSS classes and pseudo-selectors

### Component Structure Pattern

Follow this pattern for all components:

1. Create component folder: `src/components/ComponentName/`
2. Files: `ComponentName.tsx`, `ComponentName.module.css`, `index.ts`
3. Export from main `src/components/index.ts`
4. Use TypeScript interfaces for props
5. Use CSS modules for styling
6. Use `clsx` for conditional class names
7. Follow existing design system tokens

### Class Name Handling with clsx

Always use `clsx` for conditional class names instead of manual array filtering:

```tsx
// ✅ CORRECT - Using clsx
import clsx from "clsx";

const buttonClasses = clsx(
  styles.button,
  styles[variant],
  styles[size],
  {
    [styles.inverse]: inverse,
    [styles.disabled]: disabled,
    [styles.loading]: loading,
  },
  className
);

// ❌ WRONG - Manual array filtering
const buttonClasses = [
  styles.button,
  styles[variant],
  styles[size],
  inverse && styles.inverse,
  disabled && styles.disabled,
  loading && styles.loading,
  className,
]
  .filter(Boolean)
  .join(" ");
```

### Design System Integration

- Use CSS custom properties from design tokens
- Follow existing naming conventions
- Include proper accessibility attributes
- Support both light and dark themes
- Use consistent spacing and typography scales

### Example of Correct State Handling

```tsx
// ✅ CORRECT - States handled via CSS
<button className={styles.button} disabled={disabled}>
  Content
</button>

// ❌ WRONG - Don't include state as props
<button className={styles.button} state="hover" disabled={disabled}>
  Content
</button>
```

### CSS State Handling

```css
.button {
  /* Default state */
  background-color: var(--action-fill-primary-default);
}

.button:hover:not(:disabled) {
  /* Hover state */
  background-color: var(--action-fill-primary-hover);
}

.button:active:not(:disabled) {
  /* Active state */
  background-color: var(--action-fill-primary-active);
}

.button:focus-visible {
  /* Focus state */
  outline: 2px solid var(--action-outline-focus);
}

.button:disabled {
  /* Disabled state */
  opacity: 0.5;
  cursor: not-allowed;
}
```
